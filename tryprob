#!/usr/bin/env bash

##
# Script for setting up the basic files needed for solving a problem from 
# http://projecteuler.net.
#
# Creates directory for the solution files and uses a Python script to scrape 
# the problem statement from the website and store it in a text file in the 
# new directory. Also creates a blank main.cpp and Makefile.
##

# check that a problem number has been supplied
if ! [[ "$1" =~ ^[0-9]+$ ]]; then
	echo "Please supply a problem number in the range [1,556]"
	exit 2
fi

# check that problem number supplied is valid
if ! [ "$1" -ge 1 -a "$1" -le 556 ]; then
	echo "Please supply a problem number in the range [1,556]"
	exit 2
fi

# pad problem number with zeros and store in new variable $PROBLEM
printf -v PROBLEM "%03d" $1

# create directory name from variable $PROBLEM
PROBDIR="./$PROBLEM"

if [ -d "$PROBDIR" ]; then
	echo "Directory "$PROBLEM" already exists"
	while true; do
		read -r -p "Overwrite? {Yy|Nn} >> " OVERWRITE
		case $OVERWRITE in
			[yY][eE][sS]|[yY])
				echo "Overwriting directory "$PROBLEM""
				rm -rf "$PROBDIR"
				break
				;;
			[nN][oO]|[nN])
				echo "Not overwriting directory "$PROBLEM""
				exit 0
				;;
			*)
				continue
				;;
		esac
	done
else
	mkdir "$PROBDIR"
	# run python script to scrape problem statement from project euler website
	pybin/get_problem_statement.py "$1"
	# print problem statement to console and request from user the language to be
	# used to create a solution
	cat "$PROBDIR"/problem_"$PROBLEM"
	# use script newproj to set up appropriate directory structure
	#   -> tags: -l {cpp|python|scala}     Programming language specification
	#            -n <project-name>         Name of project
	#            -a                        Add files/dirs to existing directory
	#      |-> if called with no -l tag, newproj will prompt for language
	newproj -n "$PROBLEM" -a
fi

## M. Sullivan. June, 2016
